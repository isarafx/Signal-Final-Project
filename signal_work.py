#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author:Isara, Phichet, Saksit
# github: https://github.com/isarafx/Signal-Final-Project
# preview video: youtube.com/watch?v=yRimSoQqzYQ
# 11-11-2020
import webbrowser
import tkinter
import tkinter.filedialog
import tkinter.simpledialog
import tkinter.ttk
from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)
from matplotlib import style

style.use("ggplot")
import numpy as np
from ds1054z import DS1054Z
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure

class Application(tkinter.Tk):
    def __init__(self):
        super(Application, self).__init__()

        self.marker = '-r'
        self.block_number = 6
        self.ch_range = ['CHAN1', 'CHAN2', 'CHAN3', 'CHAN4']
        self.ch_plot = [0,0,0,0]
        self.signal_item = ['vmax', 'vmin', 'vpp', 'vamp', 'vavg', 'vrms', 'period', 'frequency', 'rtime', 'ftime', 'pwidth']
        self.volt_div_range = [100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.002, 0.001]
        self.time_div_range = [50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.002, 0.001, 500E-6,
                               200E-6,
                               100E-6, 50E-6, 20E-6, 10E-6, 5E-6, 2E-6, 1E-6, 500E-9, 200E-9, 100E-9, 50E-9, 20E-9,
                               10E-9,
                               5E-9]
        self.volt_div_text = ['100V', '50V', '20V', '10V', '5V', '2V', '1V', '500mV', '200mV', '100mV', '50mV', '20mV', '10mV', '5mV', '2mV',
                              '1mV']
        self.time_div_text = ['50s', '20s', '10s', '5s', '2s', '1s', '500ms', '200ms', '100ms', '50ms', '20ms', '10ms',
                              '5ms', '2ms', '1ms', '500μs', '200μs', '100μs', '50μs', '20μs', '10μs', '5μs', '2μs',
                              '1μs',
                              '500ns', '200ns', '100ns', '50ns', '20ns', '10ns', '5ns']

        self._user_interface()

    def _user_interface(self):
        """
        using only pack layout all of item are declared first then pack
        to make sure everything is configurable
        to understand how frame layed out check in github
        """

        #menubar section
        menubar = tkinter.Menu(self)

        # create more pulldown menus
        editmenu = tkinter.Menu(menubar, tearoff=0)
        editmenu.add_radiobutton(label="-r", command= lambda: self._setmarker('-r'))
        editmenu.add_radiobutton(label="*", command= lambda: self._setmarker('*'))
        editmenu.add_radiobutton(label="^", command= lambda: self._setmarker('^'))
        editmenu.add_radiobutton(label="o", command= lambda: self._setmarker('o'))
        editmenu.add_radiobutton(label="x", command= lambda: self._setmarker('x'))
        editmenu.add_radiobutton(label="H", command= lambda: self._setmarker('H'))
        editmenu.add_radiobutton(label=",", command= lambda: self._setmarker(','))
        menubar.add_cascade(label="Marker", menu=editmenu)
        helpmenu = tkinter.Menu(menubar, tearoff=0)
        helpmenu.add_command(label="Github", command= self._opengithub)
        helpmenu.add_command(label="Preview", command=self._openpreview)
        helpmenu.add_command(label="About", command=self.show_info)
        menubar.add_cascade(label="Help", menu=helpmenu)

        # display the menu
        self.config(menu=menubar)

        self.ip_frame = tkinter.LabelFrame(self, text='enter your ip')
        self.ip_frame.pack(side=tkinter.TOP, fill=tkinter.X)
        useless_var=tkinter.StringVar()
        self.ip_box = tkinter.Entry(self.ip_frame, textvariable=useless_var)
        self.ip_box.pack(side=tkinter.LEFT)
        useless_var.set('169.254.1.5')
        self.ip_button = tkinter.Button(self.ip_frame, text='enter', command=self._connect)
        self.ip_button.pack(side=tkinter.LEFT)
        self.status = tkinter.Label(self.ip_frame, text='please enter ip address first')
        self.status.pack(side=tkinter.LEFT)

        self.second_frame = tkinter.Frame(self)
        self.second_frame.pack(side=tkinter.TOP, fill=tkinter.BOTH)
        self.left_frame = tkinter.Frame(self.second_frame)
        self.left_frame.pack(side=tkinter.LEFT)
        self.right_frame = tkinter.Frame(self.second_frame)
        self.right_frame.pack(side=tkinter.RIGHT, fill=tkinter.BOTH, expand=1)
        self.chdiv_frame = tkinter.Label(self.right_frame)
        self.chdiv_frame.pack(side=tkinter.TOP)
        self.timediv = tkinter.ttk.Combobox(self.chdiv_frame, state="readonly", values=self.time_div_text)
        self.timediv.pack(side=tkinter.LEFT, fill=tkinter.X, expand=1)
        self.timediv.current(1)
        self.timediv.bind("<<ComboboxSelected>>", self._settimediv)
        self.chdiv2_frame = tkinter.Frame(self.right_frame)
        self.chdiv2_frame.pack(side=tkinter.TOP)
        self.select_ch = tkinter.ttk.Combobox(self.chdiv2_frame, state="readonly", values=self.ch_range)
        self.select_ch.pack(side=tkinter.LEFT)
        self.select_ch.current(1)
        self.select_ch.bind("<<ComboboxSelected>>", self._select_channel)

        self.voltdiv = tkinter.ttk.Combobox(self.chdiv2_frame, state="readonly", values=self.volt_div_text)
        self.voltdiv.pack(side=tkinter.LEFT)
        self.voltdiv.current(1)
        self.voltdiv.bind("<<ComboboxSelected>>", self._setvoltdiv)
        self.x_offframe = tkinter.LabelFrame(self.right_frame, text="X-Offset")
        self.x_offframe.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)
        self.x_offset = tkinter.Scale(self.x_offframe, orient=tkinter.HORIZONTAL, from_=-100, to=100)
        self.x_offset.pack(side=tkinter.TOP, fill=tkinter.BOTH)
        self.x_offset.bind("<ButtonRelease-1>", self._offset_x_change)
        self.y_offframe = tkinter.LabelFrame(self.right_frame, text="Y-Offset")
        self.y_offframe.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)
        self.y_offset = tkinter.Scale(self.y_offframe, orient=tkinter.HORIZONTAL, from_=-100, to=100)
        self.y_offset.pack(side=tkinter.TOP, fill=tkinter.BOTH)
        self.y_offset.bind("<ButtonRelease-1>", self._offset_y_change)
        self.sampling_res_frame = tkinter.LabelFrame(self.right_frame, text="Sampling_Resolution")
        self.sampling_res_frame.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)
        self.sampling_offset = tkinter.Scale(self.sampling_res_frame, orient=tkinter.HORIZONTAL, from_=1, to=15)
        self.sampling_offset.pack(side=tkinter.TOP, fill=tkinter.BOTH)
        self.sampling_offset.bind("<ButtonRelease-1>", self._graph_update)

        self.run_button_frame = tkinter.Frame(self.right_frame)
        self.run_button_frame.pack(side=tkinter.LEFT, fill=tkinter.BOTH, expand=1)
        self.run_button = tkinter.Button(self.run_button_frame, text='RUN', bg='#72f745', fg='#000000', command=self.run)
        self.run_button.pack(side=tkinter.LEFT, expand=1, fill=tkinter.X)
        self.stop_button = tkinter.Button(self.run_button_frame, text='STOP', bg='#f65656', fg='#000000', command=self.stop)
        self.stop_button.pack(side=tkinter.LEFT, expand=1, fill=tkinter.X)
        self.update_button = tkinter.Button(self.run_button_frame, text='Update', bg='#8c1515', fg='#000000', command=self._graph_update)
        self.update_button.pack(side=tkinter.LEFT, expand=1, fill=tkinter.X)
        self.report = tkinter.Label(self, text='some nonsense detail for nerd')
        self.report.pack(side=tkinter.TOP)

        self.t = np.arange(0, 12, .01)
        signal = [-0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.06, -0.06, 0.136, 0.132, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.064, 0.056, -0.136, -0.128, -0.148, -0.14, -0.148, -0.14, -0.148, -0.148, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.148, -0.064, -0.06, 0.136, 0.132, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.064, 0.06, -0.136, -0.132, -0.148, -0.14, -0.148, -0.148, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.148, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14400000000000002, -0.14, -0.14400000000000002, -0.14, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.14, -0.148, -0.148, -0.14, -0.14, -0.148, -0.14, -0.148, -0.148, -0.064, -0.06, 0.14, 0.136, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.14400000000000002, 0.152, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002, 0.152, 0.14400000000000002]
        signal2 = [0.64, 0.48, 0.56, 0.4, 0.56, 0.4, 0.48, 0.32, 0.32, 0.48, 0.4, 0.24, 0.4, 0.24, 0.32, 0.16, 0.24, 0.08, 0.08, 0.24, 0.16, 0.0, 0.0, 0.16, 0.08, -0.08, -0.08, 0.08, 0.0, -0.16, -0.08, -0.24, -0.24, -0.08, -0.16, -0.32, -0.32, -0.16, -0.24, -0.4, -0.4, -0.24, -0.32, -0.48, -0.48, -0.32, -0.4, -0.56, -0.48, -0.64, -0.64, -0.48, -0.56, -0.72, -0.72, -0.56, -0.64, -0.88, -0.72, -0.88, -0.8, -0.96, -0.8, -0.96, -0.88, -1.04, -0.88, -1.04, -0.96, -1.12, -0.96, -1.12, -1.04, -1.2, -1.04, -1.2, -1.12, -1.28, -1.28, -1.12, -1.2, -1.36, -1.36, -1.2, -1.28, -1.44, -1.28, -1.44, -1.36, -1.52, -1.52, -1.36, -1.44, -1.6, -1.6, -1.44, -1.52, -1.68, -1.68, -1.52, -1.52, -1.76, -1.6, -1.76, -1.76, -1.6, -1.68, -1.84, -1.84, -1.68, -1.76, -1.92, -1.92, -1.76, -1.92, -1.76, -1.84, -2.0, -2.0, -1.84, -1.84, -2.0, -1.92, -2.08, -2.08, -1.92, -2.08, -1.92, -2.0, -2.16, -2.16, -2.0, -2.16, -2.0, -2.08, -2.24, -2.24, -2.08, -2.24, -2.08, -2.24, -2.16, -2.16, -2.32, -2.16, -2.32, -2.32, -2.16, -2.16, -2.32, -2.24, -2.4, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.32, -2.48, -2.48, -2.32, -2.48, -2.4, -2.4, -2.56, -2.56, -2.4, -2.4, -2.56, -2.4, -2.56, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.4, -2.56, -2.48, -2.4, -2.48, -2.4, -2.4, -2.48, -2.48, -2.32, -2.32, -2.48, -2.32, -2.48, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.4, -2.32, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.32, -2.24, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.24, -2.08, -2.24, -2.08, -2.24, -2.08, -2.08, -2.24, -2.16, -2.0, -2.16, -2.0, -2.16, -1.92, -2.08, -1.92, -2.08, -1.92, -2.08, -1.92, -2.0, -1.84, -2.0, -1.84, -2.0, -1.76, -1.92, -1.76, -1.92, -1.76, -1.84, -1.68, -1.84, -1.68, -1.84, -1.6, -1.76, -1.6, -1.76, -1.6, -1.68, -1.52, -1.68, -1.52, -1.6, -1.44, -1.6, -1.44, -1.52, -1.36, -1.52, -1.36, -1.52, -1.36, -1.44, -1.28, -1.44, -1.28, -1.36, -1.2, -1.2, -1.36, -1.28, -1.12, -1.12, -1.28, -1.04, -1.2, -1.2, -1.04, -1.12, -0.96, -0.96, -1.12, -0.88, -1.04, -0.96, -0.8, -0.8, -0.96, -0.88, -0.72, -0.88, -0.64, -0.72, -0.56, -0.72, -0.56, -0.64, -0.48, -0.64, -0.48, -0.56, -0.4, -0.56, -0.32, -0.48, -0.32, -0.48, -0.24, -0.4, -0.24, -0.32, -0.16, -0.32, -0.16, -0.24, -0.08, -0.24, -0.08, -0.16, 0.0, -0.16, 0.08, -0.08, 0.08, 0.0, 0.16, 0.16, 0.0, 0.08, 0.24, 0.24, 0.08, 0.16, 0.32, 0.16, 0.32, 0.24, 0.4, 0.24, 0.48, 0.32, 0.48, 0.4, 0.56, 0.4, 0.56, 0.48, 0.64, 0.64, 0.48, 0.56, 0.72, 0.56, 0.72, 0.64, 0.8, 0.64, 0.88, 0.72, 0.88, 0.8, 0.96, 0.96, 0.8, 0.88, 1.04, 1.04, 0.88, 0.96, 1.12, 1.12, 0.96, 1.04, 1.2, 1.2, 1.04, 1.12, 1.28, 1.28, 1.12, 1.2, 1.36, 1.36, 1.2, 1.28, 1.44, 1.44, 1.28, 1.36, 1.52, 1.52, 1.36, 1.52, 1.44, 1.44, 1.6, 1.6, 1.44, 1.6, 1.76, 1.76, 1.52, 1.68, 1.84, 1.68, 1.84, 1.76, 1.84, 1.76, 1.92, 1.76, 1.92, 1.84, 2.0, 2.0, 1.84, 1.84, 2.0, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 2.0, 2.16, 2.0, 2.16, 2.0, 2.16, 2.08, 2.24, 2.08, 2.24, 2.08, 2.24, 2.16, 2.32, 2.32, 2.16, 2.16, 2.32, 2.32, 2.16, 2.24, 2.4, 2.4, 2.24, 2.4, 2.24, 2.4, 2.24, 2.4, 2.24, 2.32, 2.48, 2.48, 2.32, 2.48, 2.32, 2.32, 2.48, 2.32, 2.48, 2.48, 2.32, 2.4, 2.56, 2.4, 2.56, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.4, 2.56, 2.56, 2.4, 2.4, 2.56, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.4, 2.56, 2.48, 2.32, 2.48, 2.32, 2.32, 2.48, 2.32, 2.48, 2.48, 2.32, 2.48, 2.32, 2.4, 2.24, 2.4, 2.24, 2.4, 2.24, 2.4, 2.24, 2.24, 2.32, 2.32, 2.16, 2.16, 2.32, 2.32, 2.16, 2.24, 2.08, 2.08, 2.24, 2.24, 2.08, 2.08, 2.24, 2.16, 2.0, 2.0, 2.16, 2.0, 2.16, 2.08, 1.92, 1.92, 2.08, 1.92, 2.08, 2.0, 1.84, 1.84, 2.0, 1.92, 1.76, 1.76, 1.92, 1.76, 1.92, 1.84, 1.68, 1.68, 1.84, 1.76, 1.6, 1.6, 1.76, 1.68, 1.6, 1.6, 1.44, 1.6, 1.44, 1.52, 1.36, 1.52, 1.36, 1.44, 1.28, 1.28, 1.44, 1.36, 1.2, 1.36, 1.2, 1.2, 1.28, 1.28, 1.12, 1.28, 1.04, 1.2, 1.04, 1.12, 0.96, 1.12, 0.96, 0.96, 1.12, 1.04, 0.88, 0.96, 0.8, 0.8, 0.96, 0.88, 0.72, 0.72, 0.88, 0.8, 0.64, 0.64, 0.8, 0.72, 0.56, 0.56, 0.72, 0.64, 0.48, 0.64, 0.48, 0.56, 0.4, 0.48, 0.32, 0.48, 0.32, 0.4, 0.24, 0.24, 0.4, 0.32, 0.16, 0.32, 0.16, 0.24, 0.08, 0.08, 0.24, 0.16, 0.0, 0.08, -0.08, -0.08, 0.08, 0.0, -0.16, 0.0, -0.16, -0.08, -0.24, -0.08, -0.32, -0.16, -0.32, -0.24, -0.4, -0.24, -0.4, -0.32, -0.48, -0.48, -0.32, -0.4, -0.56, -0.4, -0.56, -0.48, -0.64, -0.56, -0.64, -0.72, -0.56, -0.64, -0.8, -0.88, -0.72, -0.8, -0.96, -0.8, -0.96, -0.88, -1.04, -1.04, -0.88, -0.96, -1.12, -0.96, -1.12, -1.04, -1.2, -1.2, -1.04, -1.12, -1.28, -1.12, -1.28, -1.2, -1.36, -1.2, -1.36, -1.28, -1.44, -1.44, -1.28, -1.36, -1.52, -1.36, -1.52, -1.44, -1.6, -1.6, -1.44, -1.6, -1.44, -1.52, -1.68, -1.68, -1.52, -1.6, -1.76, -1.76, -1.6, -1.68, -1.84, -1.84, -1.68, -1.68, -1.84, -1.76, -1.92, -1.92, -1.76, -1.84, -2.0, -1.84, -2.0, -2.0, -1.84, -1.92, -2.08, -2.08, -1.92, -2.08, -1.92, -2.0, -2.16, -2.0, -2.16, -2.16, -2.0, -2.0, -2.24, -2.08, -2.24, -2.24, -2.08, -2.24, -2.08, -2.16, -2.32, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.32, -2.24, -2.24, -2.4, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.4, -2.32, -2.32, -2.48, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.4, -2.56, -2.48, -2.4, -2.4, -2.56, -2.4, -2.56, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.56, -2.4, -2.4, -2.56, -2.4, -2.56, -2.48, -2.4, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.48, -2.32, -2.32, -2.4, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.4, -2.24, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.32, -2.16, -2.24, -2.08, -2.08, -2.24, -2.24, -2.08, -2.16, -2.0, -2.16, -2.0, -2.16, -2.0, -2.0, -2.16, -2.08, -1.92, -2.08, -1.92, -1.92, -2.08, -2.0, -1.84, -2.0, -1.84, -1.92, -1.76, -1.92, -1.76, -1.76, -1.92, -1.84, -1.68, -1.68, -1.84, -1.68, -1.84, -1.76, -1.6, -1.76, -1.6, -1.68, -1.52, -1.68, -1.52, -1.6, -1.44, -1.6, -1.44, -1.6, -1.44, -1.52, -1.36, -1.36, -1.52, -1.44, -1.28, -1.44, -1.28, -1.36, -1.2, -1.36, -1.2, -1.28, -1.12, -1.28, -1.12, -1.2, -1.04, -1.2, -1.04, -1.12, -0.96, -0.96, -1.12, -1.04, -0.88, -1.04, -0.8, -0.96, -0.8, -0.8, -0.88, -0.88, -0.64, -0.72, -0.56, -0.72, -0.56, -0.64, -0.48, -0.64, -0.48, -0.56, -0.4, -0.56, -0.4, -0.48, -0.32, -0.48, -0.32, -0.4, -0.24, -0.32, -0.16, -0.32, -0.16, -0.24, -0.08, -0.08, -0.24, -0.16, 0.0, -0.16, 0.0, -0.08, 0.08, -0.08, 0.08, 0.0, 0.16, 0.08, 0.24, 0.08, 0.24, 0.16, 0.32, 0.32, 0.16, 0.24, 0.4, 0.24, 0.4, 0.32, 0.48, 0.4, 0.56, 0.4, 0.56, 0.48, 0.64, 0.64, 0.48, 0.56, 0.72, 0.72, 0.56, 0.64, 0.8, 0.8, 0.64, 0.72, 0.88, 0.88, 0.72, 0.8, 0.96, 0.96, 0.8, 0.88, 1.04, 1.04, 0.96, 0.96, 1.12, 1.12, 1.04, 1.04, 1.2, 1.04, 1.28, 1.28, 1.12, 1.2, 1.36, 1.2, 1.36, 1.28, 1.44, 1.44, 1.28, 1.44, 1.28, 1.36, 1.52, 1.52, 1.36, 1.44, 1.6, 1.6, 1.44, 1.6, 1.76, 1.52, 1.76, 1.68, 1.84, 1.68, 1.84, 1.68, 1.84, 1.76, 1.92, 1.76, 1.92, 1.84, 1.92, 1.84, 2.0, 1.84, 2.0, 1.92, 2.08, 2.08, 1.92, 1.92, 2.08, 2.0, 2.16, 2.16, 2.0, 2.0, 2.16, 2.08, 2.24, 2.24, 2.08, 2.08, 2.24, 2.16, 2.32, 2.32, 2.16, 2.32, 2.16, 2.16, 2.32, 2.24, 2.4, 2.24, 2.4, 2.4, 2.24, 2.4, 2.24, 2.4, 2.24, 2.32, 2.48, 2.32, 2.48, 2.48, 2.32, 2.48, 2.32, 2.32, 2.48, 2.32, 2.48, 2.4, 2.56, 2.4, 2.56, 2.56, 2.4, 2.56, 2.4, 2.4, 2.56, 2.56, 2.4, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.56, 2.4, 2.4, 2.56]
        signal3 = [-0.6784, -0.7208, -0.6784, -0.7632, -0.6784, -0.7632, -0.6784, -0.7632, -0.7208, -0.8056, -0.8056, -0.7208, -0.7632, -0.8056, -0.7632, -0.848, -0.7632, -0.848, -0.8056, -0.848, -0.8056, -0.8904, -0.8904, -0.8056, -0.8056, -0.9328, -0.848, -0.9328, -0.848, -0.9328, -0.8904, -0.9328, -0.8904, -0.9752, -0.8904, -0.9752, -0.9328, -1.0176, -0.9328, -1.0176, -1.0176, -0.9328, -0.9752, -1.06, -0.9752, -1.06, -0.9752, -1.06, -1.0176, -1.1024, -1.0176, -1.1024, -1.0176, -1.1024, -1.06, -1.1448, -1.06, -1.1448, -1.06, -1.1448, -1.1024, -1.1872, -1.1872, -1.1024, -1.1872, -1.1024, -1.1448, -1.2296, -1.2296, -1.1448, -1.2296, -1.1448, -1.1872, -1.272, -1.272, -1.1872, -1.272, -1.1872, -1.2296, -1.3144, -1.3144, -1.2296, -1.272, -1.3144, -1.272, -1.3568, -1.272, -1.3568, -1.3568, -1.3144, -1.3144, -1.3992, -1.3144, -1.3992, -1.3568, -1.4416, -1.3568, -1.4416, -1.4416, -1.3568, -1.3992, -1.484, -1.3992, -1.484, -1.484, -1.3992, -1.4416, -1.5264, -1.5264, -1.4416, -1.5264, -1.4416, -1.484, -1.5688, -1.5688, -1.484, -1.5688, -1.484, -1.5264, -1.6112, -1.6112, -1.5264, -1.6112, -1.5264, -1.5688, -1.6536, -1.6536, -1.5688, -1.5688, -1.6536, -1.6112, -1.696, -1.6112, -1.696, -1.696, -1.6536, -1.7384, -1.6536, -1.7384, -1.6536, -1.7384, -1.6536, -1.696, -1.7808, -1.7808, -1.696, -1.696, -1.7808, -1.8232, -1.7384, -1.8232, -1.7384, -1.7808, -1.8656, -1.8232, -1.908, -1.8232, -1.908, -1.8656, -1.908, -1.8656, -1.9504, -1.8656, -1.9504, -1.908, -1.9504, -1.908, -1.9928, -1.908, -1.9928, -1.908, -2.0352, -1.9504, -2.0352, -1.9504, -2.0352, -2.0352, -1.9504, -1.9928, -2.0776, -1.9928, -2.0776, -2.0352, -2.12, -2.0352, -2.12, -2.0352, -2.12, -2.0352, -2.1624, -2.0776, -2.1624, -2.0776, -2.1624, -2.12, -2.2048, -2.12, -2.2048, -2.12, -2.2048, -2.12, -2.2472, -2.2472, -2.1624, -2.1624, -2.2472, -2.2048, -2.2896, -2.2048, -2.2896, -2.2048, -2.2896, -2.2472, -2.332, -2.2472, -2.332, -2.332, -2.2472, -2.2896, -2.3744, -2.2896, -2.3744, -2.2896, -2.3744, -2.332, -2.4168, -2.4168, -2.332, -2.332, -2.4168, -2.3744, -2.4592, -2.4592, -2.3744, -2.4592, -2.3744, -2.4168, -2.5016, -2.5016, -2.4168, -2.5016, -2.4168, -2.5016, -2.4168, -2.5016, -2.3744, -2.4592, -2.3744, -2.4592, -2.3744, -2.4168, -2.332, -2.332, -2.4168, -2.4168, -2.332, -2.3744, -2.2896, -2.3744, -2.2896, -2.2896, -2.3744, -2.332, -2.2472, -2.2472, -2.332, -2.332, -2.2472, -2.2472, -2.2896, -2.2896, -2.2048, -2.2048, -2.2896, -2.2896, -2.1624, -2.2472, -2.1624, -2.2472, -2.1624, -2.2048, -2.12, -2.2048, -2.12, -2.12, -2.2048, -2.1624, -2.0776, -2.0776, -2.1624, -2.0776, -2.1624, -2.12, -2.0352, -2.0352, -2.12, -2.12, -2.0352, -2.0776, -1.9928, -2.0776, -1.9928, -2.0776, -1.9928, -2.0352, -1.9504, -1.9504, -2.0352, -1.9504, -2.0352, -1.908, -1.9928, -1.908, -1.9928, -1.908, -1.9928, -1.9504, -1.8656, -1.8656, -1.9504, -1.908, -1.8656, -1.908, -1.8232, -1.8232, -1.908, -1.8656, -1.8232, -1.8232, -1.7808, -1.8232, -1.7384, -1.8232, -1.7384, -1.7808, -1.696, -1.7808, -1.696, -1.7808, -1.696, -1.7384, -1.6536, -1.7384, -1.6536, -1.7384, -1.6536, -1.696, -1.6112, -1.696, -1.6112, -1.6112, -1.696, -1.6536, -1.5688, -1.6536, -1.5688, -1.6536, -1.5688, -1.5688, -1.6112, -1.6112, -1.5264, -1.5264, -1.6112, -1.5688, -1.484, -1.5688, -1.484, -1.5264, -1.484, -1.5264, -1.4416, -1.5264, -1.4416, -1.5264, -1.3992, -1.484, -1.3992, -1.3992, -1.484, -1.4416, -1.3992, -1.4416, -1.3568, -1.4416, -1.3568, -1.4416, -1.3144, -1.3992, -1.3144, -1.3992, -1.3144, -1.3144, -1.3568, -1.3568, -1.272, -1.272, -1.3568, -1.3144, -1.2296, -1.3144, -1.2296, -1.3144, -1.2296, -1.272, -1.1872, -1.1872, -1.272, -1.1872, -1.272, -1.2296, -1.1448, -1.2296, -1.1448, -1.2296, -1.1448, -1.1872, -1.1024, -1.1024, -1.1872, -1.1872, -1.1024, -1.1448, -1.06, -1.1448, -1.06, -1.06, -1.1448, -1.1024, -1.0176, -1.0176, -1.1024, -1.0176, -1.1024, -1.06, -0.9752, -0.9752, -1.06, -1.06, -0.9752, -1.0176, -0.9328, -0.9328, -1.0176, -0.9328, -1.0176, -0.9752, -0.8904, -0.9752, -0.8904, -0.8904, -0.9752, -0.9328, -0.848, -0.848, -0.9328, -0.848, -0.9328, -0.8904, -0.8056, -0.8056, -0.8904, -0.8056, -0.848, -0.848, -0.7632, -0.7632, -0.848, -0.848, -0.7208, -0.8056, -0.7208, -0.7208, -0.8056, -0.7208, -0.7632, -0.6784, -0.7632, -0.6784, -0.7632, -0.7208, -0.636, -0.6784, -0.636, -0.5936, -0.7208, -0.6784, -0.5512, -0.5512, -0.636, -0.636, -0.5512, -0.5936, -0.5512, -0.5936, -0.5088, -0.5936, -0.5088, -0.5512, -0.5088, -0.5512, -0.4664, -0.5512, -0.4664, -0.5088, -0.424, -0.5088, -0.424, -0.5088, -0.424, -0.4664, -0.424, -0.4664, -0.3816, -0.3816, -0.4664, -0.424, -0.3392, -0.3392, -0.424, -0.424, -0.3392, -0.3816, -0.2968, -0.3816, -0.2968, -0.3816, -0.2968, -0.3392, -0.2544, -0.2544, -0.3392, -0.3392, -0.2544, -0.2968, -0.212, -0.2968, -0.212, -0.212, -0.2968, -0.2544, -0.1696, -0.2544, -0.1696, -0.1696, -0.2544, -0.212, -0.1272, -0.212, -0.1272, -0.1272, -0.212, -0.1696, -0.0848, -0.0848, -0.1696, -0.0848, -0.1272, -0.1272, -0.0424, -0.1272, -0.0424, -0.1272, -0.0424, -0.0848, 0.0, 0.0, -0.0848, -0.0424, 0.0, -0.0424, 0.0424, 0.0424, -0.0424, 0.0424, 0.0, 0.0, 0.0848, 0.0848, 0.0, 0.0424, 0.0848, 0.0424, 0.1272, 0.1272, 0.0424, 0.1272, 0.0848, 0.0848, 0.1696, 0.0848, 0.1696, 0.1272, 0.212, 0.1272, 0.212, 0.1272, 0.212, 0.1696, 0.212, 0.1696, 0.2544, 0.1696, 0.2544, 0.212, 0.2968, 0.212, 0.2968, 0.2968, 0.212, 0.2544, 0.3392, 0.2544, 0.3392, 0.3392, 0.2544, 0.3392, 0.2968, 0.2968, 0.3816, 0.3816, 0.2968, 0.3392, 0.424, 0.3392, 0.424, 0.424, 0.3392, 0.4664, 0.3816, 0.4664, 0.3816, 0.4664, 0.3816, 0.424, 0.5088, 0.424, 0.5088, 0.4664, 0.5088, 0.4664, 0.5512, 0.5088, 0.5512, 0.5088, 0.5512, 0.5512, 0.5936, 0.5512, 0.636, 0.636, 0.5512, 0.5936, 0.636, 0.5936, 0.6784, 0.6784, 0.5936, 0.636, 0.6784, 0.636, 0.7208, 0.636, 0.7208, 0.6784, 0.7208, 0.6784, 0.7632, 0.7208, 0.7632, 0.7208, 0.8056, 0.7208, 0.8056, 0.7208, 0.8056, 0.7632, 0.848, 0.848, 0.7632, 0.7632, 0.848, 0.8056, 0.8904, 0.8056, 0.8904, 0.8904, 0.8056, 0.848, 0.9328, 0.9328, 0.848, 0.9328, 0.848, 0.8904, 0.9752, 0.9752, 0.8904, 0.9328, 0.9752, 0.9328, 1.0176, 1.0176, 0.9328, 0.9752, 1.06, 0.9752, 1.06, 0.9752, 1.06, 1.0176, 1.1024, 1.1024, 1.0176, 1.0176, 1.1024, 1.06, 1.1448, 1.06, 1.1448, 1.06, 1.1448, 1.1024, 1.1872, 1.1024, 1.1872, 1.1872, 1.1024, 1.1448, 1.2296, 1.1448, 1.2296, 1.1448, 1.2296, 1.1872, 1.272, 1.272, 1.1872, 1.272, 1.1872, 1.2296, 1.3144, 1.2296, 1.3144, 1.3144, 1.2296, 1.272, 1.3568, 1.272, 1.3568, 1.3144, 1.3568, 1.3144, 1.3992, 1.3992, 1.3144, 1.3568, 1.3992, 1.3568, 1.4416, 1.3568, 1.4416, 1.4416, 1.3568, 1.3992, 1.484, 1.484, 1.3992, 1.484, 1.3992, 1.4416, 1.5264, 1.5264, 1.4416, 1.4416, 1.5688, 1.484, 1.5688, 1.5688, 1.484, 1.5688, 1.484, 1.5264, 1.6112, 1.5264, 1.6112, 1.6112, 1.5688, 1.6536, 1.5688, 1.5688, 1.6536, 1.6112, 1.696, 1.696, 1.6112, 1.696, 1.6112, 1.6536, 1.7384, 1.6536, 1.7384, 1.7384, 1.6536, 1.696, 1.7808, 1.7384, 1.8232, 1.7384, 1.8232, 1.7384, 1.8232, 1.7808, 1.8656, 1.7808, 1.8656, 1.8232, 1.908, 1.8232, 1.908, 1.8232, 1.908, 1.8656, 1.9504, 1.8656, 1.9504, 1.8656, 1.9504, 1.908, 1.9928, 1.908, 1.9928, 1.908, 1.9928, 1.9504, 2.0352, 1.9504, 2.0352, 1.9504, 2.0352, 1.9928, 2.0776, 1.9928, 2.0776, 1.9928, 2.0776, 2.0352, 2.12, 2.0352, 2.12, 2.0352, 2.12, 2.0776, 2.1624, 2.0776, 2.1624, 2.0776, 2.2048, 2.12, 2.2048, 2.12, 2.2048, 2.12, 2.2048, 2.1624, 2.2472, 2.2472, 2.1624, 2.1624, 2.2472, 2.2048, 2.2896, 2.2048, 2.2896, 2.2048, 2.332, 2.332, 2.2472, 2.332, 2.2472, 2.2472, 2.3744, 2.2896, 2.3744, 2.2896, 2.3744, 2.2896, 2.4168, 2.332, 2.4168, 2.4168, 2.332, 2.332, 2.4168, 2.3744, 2.4592, 2.3744, 2.4592, 2.4168, 2.5016, 2.5016, 2.4168, 2.5016, 2.4168, 2.4168, 2.544, 2.544, 2.4592, 2.544, 2.4168, 2.4168, 2.5016, 2.5016, 2.4168, 2.5016, 2.3744, 2.4592, 2.3744, 2.4592, 2.3744, 2.4592, 2.332, 2.4168, 2.332, 2.332, 2.4168, 2.4168, 2.2896, 2.2896, 2.3744, 2.3744, 2.2896, 2.332, 2.2472, 2.332, 2.2472, 2.332, 2.2472, 2.332, 2.2048, 2.2896, 2.2048, 2.2896, 2.2048, 2.2896, 2.1624, 2.2472, 2.1624, 2.1624, 2.2472, 2.2048, 2.12, 2.2048, 2.12, 2.12, 2.2048, 2.2048, 2.12, 2.0776, 2.1624, 2.0776, 2.1624, 2.12, 2.0352, 2.12, 2.0352, 2.12, 2.0352, 2.12, 1.9928, 2.0776, 1.9928, 1.9928, 2.0776, 2.0352, 1.9504, 2.0352, 1.9504, 2.0352, 1.9504, 1.9928, 1.908, 1.9928, 1.908, 1.908, 1.9928, 1.9928, 1.8656, 1.8656, 1.9504, 1.9504, 1.8656, 1.908, 1.8232, 1.8232, 1.908, 1.8232, 1.908, 1.8656, 1.7808, 1.7808, 1.8656, 1.7808, 1.8656, 1.8232, 1.7384, 1.7384, 1.8232, 1.7384, 1.7808, 1.7808, 1.696, 1.6536, 1.7808, 1.7384, 1.6536, 1.696, 1.6536, 1.696, 1.6112, 1.696, 1.5688, 1.6536, 1.5688, 1.6536, 1.5688, 1.6536, 1.5688, 1.6112, 1.5688, 1.6112, 1.5264, 1.6112, 1.5264, 1.5688, 1.484, 1.5688, 1.484, 1.5688, 1.484, 1.5264, 1.4416, 1.5264, 1.4416, 1.4416, 1.5264, 1.484, 1.3992, 1.484, 1.3992, 1.484, 1.3568, 1.4416, 1.3568, 1.3568, 1.4416, 1.3568, 1.4416, 1.3992, 1.3144, 1.3144, 1.3992, 1.3992, 1.3144, 1.3568, 1.272, 1.3568, 1.272, 1.272, 1.3568, 1.3144, 1.2296, 1.2296, 1.3144, 1.2296, 1.3144, 1.272, 1.1872, 1.272, 1.1872, 1.1872, 1.2296, 1.2296, 1.1448, 1.1448, 1.2296, 1.1448, 1.2296, 1.1872, 1.1024, 1.1872, 1.1024, 1.1448, 1.06, 1.1448, 1.06, 1.06, 1.1448, 1.1024, 1.0176, 1.0176, 1.1024, 1.0176, 1.1024, 1.06, 0.9752, 1.06, 0.9752, 0.9752, 1.06, 1.0176, 0.9328, 0.9328, 1.0176, 1.0176, 0.9328, 0.9328, 0.9752, 0.9752, 0.8904, 0.8904, 0.9752, 0.9328, 0.848, 0.9328, 0.848, 0.848, 0.9328, 0.8904, 0.8056, 0.8056, 0.8904, 0.8056, 0.8904, 0.848, 0.7632, 0.7632, 0.848, 0.7632, 0.848, 0.8056, 0.7208, 0.7208, 0.8056, 0.7208, 0.7632, 0.7632, 0.6784, 0.6784, 0.7632, 0.6784, 0.7632, 0.7208, 0.636, 0.636, 0.7208, 0.636, 0.6784, 0.6784, 0.5936, 0.5936, 0.6784, 0.5936, 0.6784, 0.636, 0.5512, 0.5512, 0.636, 0.5512, 0.5936, 0.5512, 0.5088, 0.5936, 0.4664, 0.5512, 0.4664, 0.5088, 0.424, 0.5088, 0.424, 0.4664, 0.424, 0.4664, 0.3816, 0.4664, 0.3816, 0.4664, 0.3816, 0.424, 0.3392, 0.424, 0.3392, 0.424, 0.3392, 0.3816, 0.2968, 0.3816, 0.2968, 0.2968, 0.3816]


        self.fig = Figure(figsize=(8, 4.5), dpi=100)
        self.ax = self.fig.add_subplot(111)
        Vdiv = 1
        self.ax.set(xlim=(0 - 6, 12 - 6))
        self.ax.set(ylim=(-4 * Vdiv, 4 * Vdiv))
        self.ax.locator_params(axis="x", nbins=12)
        self.ax.locator_params(axis="y", nbins=8)
        self.ax.axes.yaxis.set_ticklabels([])
        self.ax.axes.xaxis.set_ticklabels([])
        self.fig.suptitle("Signal and System \n""", fontweight="bold")
        self.line1, = self.ax.plot(self.t, signal, '-r', color='r', label='channel 1')
        self.line2, = self.ax.plot(self.t, signal2, '-r', color='b', label='channel 2')
        self.line3, = self.ax.plot(self.t, signal3, '-r', color='k', label='channel 3')
        self.ax.legend()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.left_frame)  # A tk.DrawingArea.
        self.canvas.draw()
        self.toolbar = NavigationToolbar2Tk(self.canvas, self.left_frame)
        self.toolbar.update()

        self.canvas.mpl_connect(
            "key_press_event", lambda event: print(f"you pressed {event.key}"))
        self.canvas.mpl_connect("key_press_event", key_press_handler)
        self.toolbar.pack(side=tkinter.BOTTOM, fill=tkinter.X)
        self.canvas.get_tk_widget().pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)

        self.channel_frame = tkinter.Frame(self.left_frame)
        self.channel_frame.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)

        self.plotdot_frame = tkinter.Frame(self.left_frame)
        self.plotdot_frame.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)
        self.v_div_label1 = tkinter.Label(self.plotdot_frame, text='ch1 v_div =')
        self.v_div_label2 = tkinter.Label(self.plotdot_frame, text='ch2 v_div =')
        self.v_div_label3 = tkinter.Label(self.plotdot_frame, text='ch3 v_div =')
        self.v_div_label4 = tkinter.Label(self.plotdot_frame, text='ch4 v_div =')
        self.v_div_label1.pack(side=tkinter.LEFT, expand=1)
        self.v_div_label2.pack(side=tkinter.LEFT, expand=1)
        self.v_div_label3.pack(side=tkinter.LEFT, expand=1)
        self.v_div_label4.pack(side=tkinter.LEFT, expand=1)

        self.chv1 = tkinter.IntVar()
        self.chv2 = tkinter.IntVar()
        self.chv3 = tkinter.IntVar()
        self.chv4 = tkinter.IntVar()
        self.ch1 = tkinter.Checkbutton(self.channel_frame, text='ch1', variable=self.chv1, command=self._graph_update)
        self.ch2 = tkinter.Checkbutton(self.channel_frame, text='ch2', variable=self.chv2, command=self._graph_update)
        self.ch3 = tkinter.Checkbutton(self.channel_frame, text='ch3', variable=self.chv3, command=self._graph_update)
        self.ch4 = tkinter.Checkbutton(self.channel_frame, text='ch4', variable=self.chv4, command=self._graph_update)
        self.ch1.pack(side=tkinter.LEFT, expand=1)
        self.ch2.pack(side=tkinter.LEFT, expand=1)
        self.ch3.pack(side=tkinter.LEFT, expand=1)
        self.ch4.pack(side=tkinter.LEFT, expand=1)


        self.ui_item = [self.voltdiv, self.timediv, self.x_offset, self.y_offset, self.sampling_offset,
                         self.ch1, self.ch2, self.ch3, self.ch4,
                        self.run_button, self.stop_button]

    def _setmarker(self, text):
        self.marker = text

    def show_info(self):
        tkinter.messagebox.showinfo("Thank for using", "This Application is Mini project of subject\n"
                                                       "010123106 Signal and System class KMUTNB\n"
                                                       "\nMade by \n-Mr.Isara Kunudomchhaiwat 6001012610097 \n"
                                                       "-Mr.Phichet Eaktrakul 6001012630071 \n"
                                                       "-Mr.Saksit Wilainuch6001012630144\n"
                                                       "\ngithub.com/isarafx/Signal-Final-Project")

    def _opengithub(self):
        webbrowser.open('github.com/isarafx/Signal-Final-Project')

    def _openpreview(self):
        webbrowser.open('youtube.com/watch?v=yRimSoQqzYQ')

    def run(self):
        try:
            self.scope.run()
        except Exception as E:
            print(E)

    def stop(self):
        try:
            self.scope.stop()
        except Exception as E:
            print(E)

    def on_key_event(event):
        key_press_handler(event, canvas, toolbar)



    def _connect(self):
        try:
            self.ip = self.ip_box.get()
            self.scope = DS1054Z(self.ip)
            print("Connected to: ", self.scope.idn)
            self.report['text'] = self.scope.idn
            self.status['text'] = "Login Successful"
            self._select_channel()
            self._text_update()
            self._check_connection()
        except Exception as e:
            self.status['text'] = 'Cant connect to scope'
            self.report['text'] = e


    def _offset_x_change(self, event=0):
        self.block_number = 6
        offset = 0.01 * self.x_offset.get() * self.block_number * self.time_div_range[self.timediv.current()]
        self.scope.timebase_offset = 0
        self.scope.timebase_offset = offset
        self._graph_update()
        # print(block_number, '-', self.x_offset.get(), '-', self.time_div_range[self.timediv.current()], '-', offset)

    def _offset_y_change(self, event=0):
        self.block_number = 6
        offset = 0.01 * self.y_offset.get() * self.block_number * self.volt_div_range[self.voltdiv.current()]
        self.scope.set_channel_offset(self.select_ch.get(), offset)
        self.offsety = self.y_offset.get()
        self._graph_update()
        # print(block_number, '-', self.offsety, '-', self.volt_div_range[self.voltdiv.current()], '-', offset)


    def _find_maxdiv(self):
        if self.chv1.get():
            if self.maxdiv < self.voltdivlist[0]:
                self.maxdiv = self.voltdivlist[0]
        if self.chv2.get():
            if self.maxdiv < self.voltdivlist[1]:
                self.maxdiv = self.voltdivlist[1]
        if self.chv3.get():
            if self.maxdiv < self.voltdivlist[2]:
                self.maxdiv = self.voltdivlist[2]
        if self.chv4.get():
            if self.maxdiv < self.voltdivlist[3]:
                self.maxdiv = self.voltdivlist[3]
    def _graph_update(self, event=0):
        try:
            self.ax.cla()
            self.canvas.flush_events()
            ratio = self.sampling_offset.get()
            self.voltdivlist = [self.scope.get_channel_scale('CHAN1'), self.scope.get_channel_scale('CHAN2'), self.scope.get_channel_scale('CHAN3') , self.scope.get_channel_scale('CHAN4')]
            self.offsety = [self.scope.get_channel_offset('CHAN1'), self.scope.get_channel_offset('CHAN2'), self.scope.get_channel_offset('CHAN3'), self.scope.get_channel_offset('CHAN4')]
            plotlist = {}
            self.t = np.arange(0, 1200)[::ratio]
            self.maxdiv = -1
            self._find_maxdiv()
            color = ['r', 'b', 'y', 'g']
            if self.chv1.get():
                plotlist['channel1'] = [self._channel_plot_data(0, ratio), color[0], self.marker]
            if self.chv2.get():
                plotlist['channel2'] = [self._channel_plot_data(1, ratio), color[1], self.marker]
            if self.chv3.get():
                plotlist['channel3'] = [self._channel_plot_data(2, ratio), color[2], self.marker]
            if self.chv4.get():
                plotlist['channel4'] = [self._channel_plot_data(3, ratio), color[3], self.marker]

            # Set axis ranges; by default this will put major ticks every 25.
            self.ax.set_xlim(0, 1200)
            self.ax.set_ylim(self.maxdiv*-4, self.maxdiv*4)
            # Change major ticks to show every 20.
            self.ax.xaxis.set_major_locator(MultipleLocator(100/ratio))
            self.ax.yaxis.set_major_locator(MultipleLocator(self.maxdiv))
            self.ax.grid(which='major', color='#CCCCCC', linestyle='--')
            self.ax.grid(which='minor', color='#CCCCCC', linestyle=':')
            self.ax.axes.yaxis.set_ticklabels([])
            self.ax.axes.xaxis.set_ticklabels([])
            for key in plotlist:
                self.ax.plot(self.t, plotlist[key][0], plotlist[key][2], color=plotlist[key][1], label=(key))
            self.ax.legend()
            self.canvas.draw()
        except Exception as e:
            self.status['text'] = 'Cant reload graph'
            self.report['text'] = e

    def _text_update(self):
        """
        quite unreadable but it set label text by get scope div first
        then translate to div index and use that index to get volt text list
        """
        self.v_div_label1['text'] = 'ch1 v_div ='+self.volt_div_text[self.volt_div_range.index(self.scope.get_channel_scale('CHAN1'))]
        self.v_div_label2['text'] = 'ch2 v_div ='+self.volt_div_text[self.volt_div_range.index(self.scope.get_channel_scale('CHAN2'))]
        self.v_div_label3['text'] = 'ch3 v_div ='+self.volt_div_text[self.volt_div_range.index(self.scope.get_channel_scale('CHAN3'))]
        self.v_div_label4['text'] = 'ch4 v_div ='+self.volt_div_text[self.volt_div_range.index(self.scope.get_channel_scale('CHAN4'))]
        self.after(1000, self._text_update)
    def _channel_plot_data(self, ch, ratio):
        chan = 'CHAN' + str(ch+1)
        data = self.scope.get_waveform_samples(chan)[::ratio]
        data = list(np.asarray(data) + self.offsety[ch])
        data = np.array(data, dtype=float) * (self.maxdiv / self.voltdivlist[ch])
        return data

    def _setvoltdiv(self, event=0):
        try:
            self.scope.set_channel_scale(self.select_ch.get(), self.volt_div_range[self.voltdiv.current()])
            self._graph_update()
        except Exception as e:print(e)

    def _settimediv(self, event=0):
        try:
            self.scope.timebase_scale = self.time_div_range[self.timediv.current()]
        except Exception as e: print(e)

    def _select_channel(self, event=0):
        try:
            #get channel info and change combo box first
            v_div = self.scope.get_channel_scale(self.select_ch.get())
            v_off = self.scope.get_channel_offset(self.select_ch.get())
            t_off = self.scope.timebase_offset
            t_div = self.scope.timebase_scale
            time_index = self.time_div_range.index(t_div)
            volt_index = self.volt_div_range.index(v_div)
            v_offset_percent = (v_off*100)/(self.block_number * v_div)
            t_offset_percent = (t_off*100)/(self.block_number * t_div)
            self.voltdiv.current(volt_index)
            self.timediv.current(time_index)
            self.y_offset.set(v_offset_percent)
            self.x_offset.set(t_offset_percent)
        except Exception as e:
            self.status['text'] = 'Cant select channel'
            self.report['text'] = e

    def _check_connection(self):
        try:
            self.scope.idn
        except Exception as e:
            self.status['text'] = 'Scope Disconnected!'
            self.report['text'] = e
        self.after(1000, self._check_connection)


root = Application()
root.mainloop()